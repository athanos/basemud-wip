#include <sys/types.h>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <assert.h>
#include <zlib.h>

/* include main header file */
#include "mud.h"

int getStatMod(CHAR_DATA *ch, int stat) {
  int stat_value = ch->stat_base[stat];
  if (stat_value <=  4) {
    return -3;
  }
  else if (stat_value == 5 || stat_value == 6) {
    return -2;
  }
 else if (stat_value == 7 || stat_value == 8) {
    return -1;
  }
 else if (stat_value > 8 && stat_value < 13) {
    return 0;
  }
 else if (stat_value == 13 || stat_value == 14) {
    return 1;
  }
 else if (stat_value == 15 || stat_value == 16) {
    return 2;
  }
 else if (stat_value == 17 || stat_value == 18) {
    return 3;
  }
 else if (stat_value == 19 || stat_value == 20) {
    return 4;
  }
 else if (stat_value == 21 || stat_value == 22) {
    return 5;
  }
 else if (stat_value == 23 || stat_value == 24) {
    return 6;
  }
 else if (stat_value > 24) {
    return 7;
  }
  else {
    return 0;
  }
}

void setSecondaryStats (CHAR_DATA *ch) {
  int i = 0;

  ch->stat_base[STAT_HIT_POINTS] = 10 + getStatMod(ch, STAT_VITALITY) + getStatMod(ch, STAT_ENDURANCE);
  ch->stat_base[STAT_STAMINA] = 10 + getStatMod(ch, STAT_STRENGTH) + getStatMod(ch, STAT_ENDURANCE);
  ch->stat_base[STAT_MANA] = 10 + getStatMod(ch, STAT_INTELLIGENCE) + getStatMod(ch, STAT_WILLPOWER);
  ch->stat_base[STAT_DEFENSE] = 5 + getStatMod(ch, STAT_VITALITY) + getStatMod(ch, STAT_AGILITY);
  ch->stat_base[STAT_RESISTANCE] = 5 + getStatMod(ch, STAT_WILLPOWER) + getStatMod(ch, STAT_INTELLIGENCE);
  ch->stat_base[STAT_ATTACK] = 5 + getStatMod(ch, STAT_STRENGTH) + getStatMod(ch, STAT_AGILITY);
  ch->stat_base[STAT_SPELL_POWER] = 5 + getStatMod(ch, STAT_INTELLIGENCE) + getStatMod(ch, STAT_WILLPOWER);
  ch->stat_base[STAT_INITIATIVE] = 10 + getStatMod(ch, STAT_AGILITY) + getStatMod(ch, STAT_PERCEPTION);
  ch->stat_base[STAT_RANGE] = 10 + getStatMod(ch, STAT_PERCEPTION);
  ch->stat_base[STAT_MORALE] = 10 + getStatMod(ch, STAT_WILLPOWER)  + getStatMod(ch, STAT_CHARISMA);
  ch->stat_base[STAT_CAPACITY] = 20 + getStatMod(ch,STAT_STRENGTH);

  for (i=0;i<STAT_MAX; i++) {
    ch->stat_curr[i]=ch->stat_base[i]; 
  }
}
